# Generated by Django 5.2.6 on 2025-10-02 03:56

from django.db import migrations

def actualizar_estados_cita(apps, schema_editor):
    """Actualiza los estados de cita existentes a la nueva estructura"""
    EstadoCita = apps.get_model('citas', 'EstadoCita')
    
    # Eliminar estados que no se van a usar
    estados_a_eliminar = ['Confirmada']
    for nombre_estado in estados_a_eliminar:
        try:
            estado = EstadoCita.objects.get(nombre=nombre_estado)
            estado.delete()
        except EstadoCita.DoesNotExist:
            pass
    
    # Actualizar descripciones de estados existentes
    estados_actualizados = [
        {'nombre': 'Programada', 'descripcion': 'Cita programada pero aún no atendida'},
        {'nombre': 'Cancelada', 'descripcion': 'Cita cancelada por el paciente o el médico'},
        {'nombre': 'Completada', 'descripcion': 'Cita atendida y finalizada'},
        {'nombre': 'No asistió', 'descripcion': 'El paciente no asistió a la cita'},
    ]
    
    for datos in estados_actualizados:
        try:
            estado = EstadoCita.objects.get(nombre=datos['nombre'])
            estado.descripcion = datos['descripcion']
            estado.save()
        except EstadoCita.DoesNotExist:
            pass

def revertir_actualizacion_estados_cita(apps, schema_editor):
    """Revierte los cambios en los estados de cita"""
    EstadoCita = apps.get_model('citas', 'EstadoCita')
    
    # Volver a crear el estado eliminado
    EstadoCita.objects.get_or_create(
        nombre='Confirmada',
        defaults={
            'descripcion': 'Cita confirmada por el paciente',
            'color': '#28a745'
        }
    )
    
    # Revertir descripciones
    estados_originales = [
        {'nombre': 'Programada', 'descripcion': 'Cita programada pero aún no atendida'},
        {'nombre': 'Confirmada', 'descripcion': 'Cita confirmada por el paciente'},
        {'nombre': 'Cancelada', 'descripcion': 'Cita cancelada por el paciente o el médico'},
        {'nombre': 'Completada', 'descripcion': 'Cita atendida y finalizada'},
        {'nombre': 'No asistió', 'descripcion': 'El paciente no asistió a la cita'},
    ]
    
    for datos in estados_originales:
        try:
            estado = EstadoCita.objects.get(nombre=datos['nombre'])
            estado.descripcion = datos['descripcion']
            estado.save()
        except EstadoCita.DoesNotExist:
            pass

class Migration(migrations.Migration):

    dependencies = [
        ('pacientes', '0003_codigo_postal_max_length_to_4'),
        ('citas', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            actualizar_estados_cita,
            revertir_actualizacion_estados_cita
        ),
    ]